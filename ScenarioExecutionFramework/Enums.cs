using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ScenarioExecutionFramework
{
    public enum DebugAction
    {
        None = 0,
        Run = 1,
        Break = 2,
        Terminate = 3
    };

    /// <summary>
    /// A result used when logging information about the status of a 
    /// scenario case.
    /// </summary>
    public enum Result
    {
        /// <summary>
        /// No result has been logged
        /// </summary>
        NoResult,

        /// <summary>
        /// The script successfully completed the scenario
        /// passed.
        /// </summary>
        Pass,

        /// <summary>
        /// This is a warning generated by the infrastructure. Not to be used by scenario cases. Help in filtering logging.
        /// </summary>
        InfrastructureWarning,

        /// <summary>
        /// This is a warning that a scenario can use to flag some scenarios action that is taking too long.  
        /// </summary>
        PerfWarning,

        /// <summary>
        /// The script successfully completed the scenario
        /// but there is something that the user might want to 
        /// check out.
        /// </summary>
        Warning,

        /// <summary>
        /// The script was not able to successfully complete the scenario
        /// because of an exception that was thrown by scenario execution 
        /// code during the run.
        /// </summary>
        Exception,

        /// <summary>
        /// The script successfully completed the scenario but validation
        /// failed.
        /// </summary>
        Fail,

        /// <summary>
        /// The script was not able to successfully complete the scenario
        /// because of an internal script error.
        /// </summary>
        Error,

        /// <summary>
        /// The script was not able to successfully complete the scenario
        /// because of an exception that was thrown by scenario execution 
        /// code during the run.
        /// </summary>
        ProductException,

        /// <summary>
        /// This is logged when a stage in the scenario was timed out
        /// </summary>
        Timeout,

        /// <summary>
        /// The scenariois irrelevant for this run.
        /// </summary>
        Skip,
    }

    /// <summary>
    /// Which type of results to log to the summary
    /// </summary>
    public enum LogResults
    {
        /// <summary>
        /// Log all results
        /// </summary>
        AllResults,

        /// <summary>
        /// Log only fail and block
        /// </summary>
        FailsOnly,

        /// <summary>
        /// Do not log a summary
        /// </summary>
        None
    }

    /// <summary>
    /// Message highlighting type for highlighting info messages
    /// </summary>
    public enum MessageHighlightType
    {
        /// <summary>
        /// General information
        /// </summary>
        Info,

        /// <summary>
        /// Product or test details
        /// </summary>
        Details,

        /// <summary>
        /// Log section header
        /// </summary>
        Header,

        /// <summary>
        /// Significant information
        /// </summary>
        Important
    }
}
